1. Frontend->Backend->Camunda API? Közvetlenül vagy csak közvetetten
2. .db fájl hol van?
3. Java kódból küldjek Camunda Rest API felé rest kéréseket
   vagy
   Java kódból lehet közvetlen kérdezni az engine-től
4. Mennyit kéne használni a Rest API-t és a Java engine kódot

5. Honnan lehet tudni, hogy adott task-nál milyen változók vannak (beteg értesítése -> elmarad vagy késik)
6. Honnan tudom, milyen típusú a változó?

7. Camunda db egybe a sajáttal?

8. Angular route: component: ComponentPerPage (mint Vue-ban view és component)

- TaskDto -> Frontend és backend-be
   - Ki lehet olvasni a hozzá tartozó változókat
   - Meg lehet jeleníteni a hozzá tartozó UI-t
- Egy db, bele 1 db users tábla->orvos-1, orvos-2, recepcios-1...
- Java kód, nem Rest api
- Angular -> Nincs view/component, de van egy oldalért felelős component

----------------------

1. Külön állítsak task-on változót, assignee-t vagy vagy egybe egy update fv? (valszeg egyesével)
2. Amikor megkezdődik egy folyamat, a recepciósnak, vagy akár az orvosoknak claimelni kell vagy a rendszer beossza arra a processre a szereplőket? (A beteg az adott)

NGRX

---
1. Angular service -> adatbázis lekérés vagy http kérés -> await és visszatérek? vagy promise-t adok vissza és subscribe (azzal nem működött, (nem volt szinkronban?))
2. Van e global event? De lehet hogy helyettesíti a state management, amire lehet feliratkozni
3. Fundamentában hogyan van pontosan megoldva a frontenden az interface/típus alapján megjelenítés
4. Layout, containerek hogy vannak?
5. Angular app-ot hogy érdemes mappákba szervezni (business logika a service-ekbe, interface model-be?)
6. Változók lekérdezése, értékek feltöltése backend-en
7. Számlázás adott instance-hez rendelve, mondjuk külön táblába kiírva

---------------------------------

1. Service-ben exception, ami visszatér a controllerben egy responsebody-val (ProcessInstanceController.setVariable() -nél kéne)
2. 1 reducer = 1 fv? 1 global store, ahol van minden? pl taskok, selectedtask, user
3.
MELYIK LEGYEN?
Ha check-nél visszaadom az id-t, akkor azt el tudom tárolni frontend-en és az alapján frontend-en meg tudom oldani, hogy az adott id-jű ember task-jait kérem és max backend-en megnézem tényleg ő e.
Másik lehetőség: csak a felhasználónevet küldöm vissza a jwt tokenben úgyis benne lesz az id, így frontenden egy generikus task lekérést csinálok és a küldött jwt token alapján kapok vissza taskokat.
4. regisztrálás hogy legyen? mintha egy sima weboldal lenne?